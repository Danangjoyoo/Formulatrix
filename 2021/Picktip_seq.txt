1. Check pipette IsSimulated
2. GetFolErrorConfig(index, bool folErrorEnabled, double folErrorLimit)
	-> firmware : GetFolErrorConfigResponse GetFolErrorConfig(short motorId) -> motorID = 0
3. SetFolErrorConfig(index, folErrorEnabled, FolErrorLimit)
	-> firmware : void SetFolErrorConfig(short motorId, bool isTrackingEnabled, double maxFolError); -> motorID = 0, isTrackingEnabled = true, picktip.json[FolErrorLimit] = 1000
4. GetTargetReachedParams(index, double trackingWindow, ushort trackingTimeMs)
	-> firmware : void GetTargetReachedParamsResponse GetTargetReachedParams(short motorId)
5. SetTargetReachedParams(index, TargetReachedWindow)
	-> firmware : void SetTargetReachedParams(short motorId, double trackingWindow, ushort trackingTimeMs); -> trackingWindow = picktip.json[TargetReachedWindow], , trackingTimeMs = 0
6. if not retry: positionBeforePicktip = lastKnownPos
7. StartRegulatorMode
	-> firmware : ushort StartRegulatorMode(ushort mode, double target, ushort, pidSelect, bool activeDPCVolumeLimit, double volumeLimit);
	-Set mode = FlowRegulatormode.FlowCheck = 2
	-target = picktip.json[flow] = 150
	-pidSelect(dispense) = RegulatorPIDMode.cs : Aspirate = 0, Dispense = 1, DPC = 2
	-activeDPCVolumeLImit = false
	-Volume LImit = 0
8. if not isGroup: ReadInitialSensorDLLT
	a. initialResistance = 0
	b. getAtmPressure
	c. for i in validationSampleNum:
		initialRes += readDLLTsensor
		sleep(validationSamplingDelay)
	d. initialRes /= validationSampleNum
9. targetZPos -= collisionCompressionTolerance->(4.0 @ chipCalibrationService.json)
10. FirstMove(uint index, double targetpos, double expectedTriggeredPos) --> nusuk tip
	a. SetHardBrakeAbort
		colThres = readCol - picktipconfig.colThresh
		setAbortThres Collision(colThres)
		setAbortThres StemCurrent(threshold=FirstCurrentSensorThres)
		stemHardBrakeConfig.AbortOnTipCollision = True
		stemHardBrakeConfig.AbortOnStemCurrent = True
		setAbortConfig stemHardBrakeConfig
	b. firmware -> Move Z (will brake when collide)
	c. if brake: clearZHardBrakeAbortConfigandFaults
	d. firmware -> waitEOM (to prevent over movement of Z)
	e. GetTriggeredInput: stemHardBrake
		if stemHardBrake: getPos
			if actualPos - expectedPos < validTolerance: no Error
			else: Error wrongtipcaddy
		elif abortOnStemCurrent: Error wrongsensorTriggered
		else: picktipNotTriggered
	f. ClearZHardBrake
	return firstMoveStat
11. if firstMove No error: Go SecondMove --> angkat tip
	a. Abort stemMovement when current exceeded:
		SetAbortThres stemCurrentSensor, SecondCurrentSensorThreshold
		stemHrdBrakeConfig.AbortOnStemCurrent = True
		setAbortConfig, stemHardBrakeCOnfig
	b. firmware.Move Z
	c. if error:
		clearZHHardBrakeAbortCOnfigAndFaults
	d. firmware.wait EOM
	e. if error:
		clearZHardBrakeAbortCOnfigAndFaults
	f. Check if current abort input is really triggered:
		getTriggeredInput : stemHardBrake
			if abortOnStemCurrent:
				ClearZHardBrakeConfigFault
				GetZpos
				targetRetractpos2 = currentPos2 + safeRetractStemDistance
				firmware.Move Z
				waitPosition(targetRetractPos2 - WaitPOsitionOffset)
	g. ClearZHardBrakeAbortCOnfigFaults
	h. GetZpos
	i. TargetRetractPos = currentPos + SafeRetractStemDistance
	j. if isGroup:
			firmware.moveZ
			sleep(DelayBeforeValidateTip)
			waitEOM
	   else:
	   		firmware.MoveZ
	   		sleep(DelayBeforeValidateTip)
	   		ValidateTipPickup
	   			valid = True
	   			tipKey = newObject Tipkey(tipCapacity, tipType)
	   			press2 = 0
	   			collision = 0
	   			resistance = 0
	   			resistanceValidationResults = false
	   			for i in range(samplenum):
	   				press2 += firmware.readP2
	   				collision += firmware.readCollision
	   				resistance += firmware.readDLLT
	   				sleep(validationSamplingDelay)

	   			ValidPresslimit = tipKeyValidPressureLimit
	   			avgP2 = p2/validationSampleNum
	   			delta_p2 = avgp2 - atmPress
	   			if isSimulatedPressureReg(): p2ValidationResults = true
	   			else: p2ValidationResults = validP2minLimit <= deltaP2 <= validP2Max
	   			TipType OrignicalTipType : tipType
	   			if p2ValidationResults false:
	   				tipTypes = [GetValues of tipType]
	   				for i in i<tipTypes.Length:
	   					tipkey newTipKey = newObject TipKey(tipCapacity, tipTypes)
	   					otherValidPressLimit = tipKeyValidPressureLimit[newTipKey]
	   					p2ValidationResults =  validP2minLimit <= deltaP2 <= validP2Max

	   					if p2ValidationResults == true:
	   						correctTipTypeResults = false
	   						tipType = tipTypes
	   			else:
	   				correctTipTypeResults = false
	   			collision /= validationSampleNum
	   			collisionValidationResults =
	   				ValidCollisionMinLimit <= collision <= ValidCollisionMaxLimit
	   			resistance /= validationSampleNum
	   			//calculate relative resistance delta (before+after picktip)
	   			resistance = initialRes - resistance
	   			resistanceValidationResult = 
	   				ValidResMinLimit <= resistance <= ValidResMaxLimit
	   			//careful when re-order sensor checking sequence, please check 'valid' value is correct
	   			if p2ValidResult == false: valid = PressSensorValidationFailed
	   			if originalTip == TipType.filter and not CorrectTypeResult: 
	   				valid = wrongTypFilter
	   			if resistanceValidationResult == flase:
	   				if valid:
	   					valid = ResistanceSensorValidationFailed
	   				else:
	   					valid = PressAndResistSensorValidationFailed
	   			if collisionValidationResult == false:
	   				if valid:
	   					valid = PickTipCollisionSensorValidationFailed
	   				elif valid == PressSensorValidationFailed:
	   					valid = PickTipPressureAndCollisionSensorValidationFailed
	   				elif valid == ResistSensorValidationFailed:
	   					valid = PickTipCollisionAndResistSensorFailed
	   				else:
	   					valid = PickTipAllSensorsValidationFailed
	   			return valid
12. firmware.AbortFlowFunct(index)
13. firmware.SetFolErrorConfig(index, bool folErrorEnabled, double folEerrorLimit)
14. firmware.setTargetReachedParams(index, double trackingWindow, ushort trackingTimeMs)